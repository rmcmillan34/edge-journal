name: ci

on:
  push:
    branches: [ main, dev ]
    tags: [ 'v*.*.*' ]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      db:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: edge
          POSTGRES_PASSWORD: edge
          POSTGRES_DB: edgejournal
        ports: ["5432:5432"]
        options: >-
          --health-cmd="pg_isready -U edge -d edgejournal"
          --health-interval=5s --health-timeout=5s --health-retries=20

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install API deps
        working-directory: api
        run: |
          pip install --upgrade pip
          pip install fastapi uvicorn[standard] pytest httpx ruff black \
            sqlalchemy alembic psycopg2-binary pydantic \
            passlib[argon2] python-jose[cryptography] \
            email-validator python-multipart

      - name: Ensure package layout
        working-directory: api
        run: |
          test -f app/__init__.py || touch app/__init__.py

      - name: Run Alembic migrations
        working-directory: api
        env:
          DATABASE_URL: postgresql+psycopg2://edge:edge@localhost:5432/edgejournal
          PYTHONPATH: ${{ github.workspace }}/api
        run: alembic upgrade head

      - name: Run API tests
        working-directory: api
        env:
          DATABASE_URL: postgresql+psycopg2://edge:edge@localhost:5432/edgejournal
          PYTHONPATH: ${{ github.workspace }}/api
        run: pytest -q

  build-and-push:
    needs: test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_API: ghcr.io/${{ github.repository_owner }}/edge-journal-api
      IMAGE_WEB: ghcr.io/${{ github.repository_owner }}/edge-journal-web
    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        run: echo "VERSION=$(cat VERSION | tr -d '\n')" >> $GITHUB_OUTPUT

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push API (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ steps.ver.outputs.VERSION }}
          tags: |
            ${{ env.IMAGE_API }}:latest
            ${{ env.IMAGE_API }}:${{ steps.ver.outputs.VERSION }}
            ${{ env.IMAGE_API }}:${{ github.sha }}

      - name: Build & Push Web (multi-arch)
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            VERSION=${{ steps.ver.outputs.VERSION }}
          tags: |
            ${{ env.IMAGE_WEB }}:latest
            ${{ env.IMAGE_WEB }}:${{ steps.ver.outputs.VERSION }}
            ${{ env.IMAGE_WEB }}:${{ github.sha }}

  release:
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          token: ${{ secrets.GITHUB_TOKEN }} 
